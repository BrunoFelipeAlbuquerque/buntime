version: '3.9'
name: virtual
services:
  #############################
  # CODE
  #############################
  code:
    container_name: code
    build:
      dockerfile: ./code/Dockerfile
    mem_limit: $AWS_T3_NANO_MEMORY_LIMIT
    cpus: $AWS_T3_NANO_CPUS
    volumes:
      - ./code:/code
      - node_modules:/usr/src/app/node_modules
    ports:
      - 8080
    networks:
      - backend

  #############################
  # PROXY
  #############################
  proxy:
    container_name: proxy
    image: nginx:1.25
    ports:
      - 80:80
    volumes:
      - ./infrastructure/nginx:/etc/nginx/conf.d
    depends_on:
      - code
      - database
      - database-gui
      - cache
      - cache-gui
      - event-store
      - event-store-gui
    links:
      - code
    networks:
      - backend

  #############################
  # DATABASE
  #############################
  database:
    container_name: database
    image: postgres:16.1
    environment:
      - PGUSER=$POSTGRES_USER
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 3
    mem_limit: $AWS_T3_NANO_MEMORY_LIMIT
    cpus: $AWS_T3_NANO_CPUS
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./database/setup_script.sql:/docker-entrypoint-initdb.d/setup_script.sql
    ports:
      - 5432:5432
    depends_on:
      - code
    networks:
      - backend

  #############################
  # DATABASE GUI
  #############################
  database-gui:
    container_name: database-gui
    image: dpage/pgadmin4:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 2
        window: 180s
    environment:
      - PGADMIN_DEFAULT_EMAIL=$PGADMIN_DEFAULT_EMAIL
      - PGADMIN_DEFAULT_PASSWORD=$PGADMIN_DEFAULT_PASSWORD
      - PGADMIN_LISTEN_PORT=5050
    ports:
      - 5050:5050
    depends_on:
      - database
    networks:
      - backend

  #############################
  # CACHE
  #############################
  cache:
    container_name: cache
    image: redis:7.2
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 10
        window: 60s
    ports:
      - 6379:6379
    volumes:
      - /cache:/root/redis
      - /cache/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=$REDIS_PASSWORD
      - REDIS_PORT=$REDIS_PORT
      - REDIS_DATABASES=$REDIS_DATABASES
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      retries: 2
      timeout: 5s
    networks:
      - backend

  #############################
  # CACHE-GUI
  #############################
  cache-gui:
    container_name: cache-gui
    image: rediscommander/redis-commander:latest
    build: .
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 2
        window: 180s
    environment:
    - REDIS_HOSTS=$REDIS_HOSTS
    ports:
    - 8081:8081
    depends_on:
      - cache
    networks:
      - backend

  #############################
  # EVENT-STORE-MANAGER
  #############################   
  event-store-manager:
    container_name: event-store-manager
    image: confluentinc/cp-zookeeper:7.6.0
    environment:
      ZOOKEEPER_CLIENT_PORT: $ZOOKEEPER_CLIENT_PORT
      ZOOKEEPER_TICK_TIME: $ZOOKEEPER_TICK_TIME
    ports:
      - 2181:2181
    networks:
      - backend

  #############################
  # EVENT-STORE
  #############################   
  event-store:
    container_name: event-store
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      - event-store-manager
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: $KAFKA_ZOOKEEPER_CONNECT
      KAFKA_ADVERTISED_LISTENERS: $KAFKA_ADVERTISED_LISTENERS
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: $KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
      KAFKA_INTER_BROKER_LISTENER_NAME: $KAFKA_INTER_BROKER_LISTENER_NAME
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: $KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
    networks:
      - backend

  #############################
  # EVENT-STORE-GUI
  #############################   
  event-store-gui:
    container_name: event-store-gui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - event-store
      - event-store-manager
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: $KAFKA_CLUSTERS_0_NAME
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: $KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
      KAFKA_CLUSTERS_0_ZOOKEEPER: $KAFKA_CLUSTERS_0_ZOOKEEPER
    networks:
      - backend

#############################
# VOLUMES
#############################
volumes:
  cache:
    driver: local
  pgdata:
  node_modules:

#############################
# NETWORKS
#############################
networks:
  backend:
    driver: bridge