version: '3.9'
name: virtual
services:
  ####SERVICE####
  code:
    container_name: code
    build:
      dockerfile: ./bun/Dockerfile
    mem_limit: $AWS_T3_NANO_MEMORY_LIMIT
    cpus: $AWS_T3_NANO_CPUS
    ports:
      - 8080
    networks:
      - backend

  ####SERVICE####
  proxy:
    container_name: proxy
    image: nginx:1.25
    ports:
      - "80:80"
    volumes:
      - ./bun/app:/var/www/html
      - ./infrastructure/nginx:/etc/nginx/conf.d
    networks:
      - backend
    depends_on:
      - code

  ####SERVICE####
  database:
    container_name: database
    build:
      dockerfile: ./postgresql/Dockerfile
    environment:
      - PGUSER=$POSTGRES_USER
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 3
    mem_limit: $AWS_T3_NANO_MEMORY_LIMIT
    cpus: $AWS_T3_NANO_CPUS
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    depends_on:
      - code
    networks:
      - backend

  ####SERVICE####
  database-gui:
    container_name: database-gui
    image: dpage/pgadmin4:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 2
        window: 180s
    environment:
      - PGADMIN_DEFAULT_EMAIL=$PGADMIN_DEFAULT_EMAIL
      - PGADMIN_DEFAULT_PASSWORD=$PGADMIN_DEFAULT_PASSWORD
      - PGADMIN_LISTEN_PORT=5050
    ports:
      - "5050:5050"
    depends_on:
      - database
    networks:
      - backend

  ####SERVICE####
  cache:
    container_name: cache
    image: redis:7.2
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 10
        window: 60s
    ports:
      - "6379:6379"
    volumes:
      - /path/to/local/data:/root/redis
      - /path/to/local/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=$REDIS_PASSWORD
      - REDIS_PORT=$REDIS_PORT
      - REDIS_DATABASES=$REDIS_DATABASES
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      retries: 2
      timeout: 5s
    networks:
      - backend

  ####SERVICE####
  cache-gui:
    container_name: cache-gui
    image: rediscommander/redis-commander:latest
    build: .
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 2
        window: 180s
    environment:
    - REDIS_HOSTS=$REDIS_HOSTS
    ports:
    - 8081:8081
    depends_on:
      - cache
    networks:
      - backend

####VOLUMES####
volumes:
  cache:
    driver: local
  pgdata:

####NETWORKS####
networks:
  backend:
    driver: bridge